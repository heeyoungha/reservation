events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 로그 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr response_time: $upstream_response_time';
                    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # 기본 설정
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # Upstream 설정
    upstream flight_search_service {
        server flight-search-service:8081;
        # 헬스체크 및 로드밸런싱 옵션
        keepalive 32;
    }
    
    upstream flight_booking_service {
        server flight-booking-service:8082;
        keepalive 32;
    }
    
    # 메인 서버 설정
    server {
        listen 80;
        server_name localhost;
        
        # 정적 파일 서빙 (프론트엔드)
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # 캐싱 설정
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # API Gateway 라우팅
        
        # 항공편 검색 API (Search Service로 라우팅)
        location /api/flights/ {
            # Rate limiting 적용
            limit_req zone=api burst=20 nodelay;
            
            # 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 타임아웃 설정
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 버퍼 설정
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Search Service로 프록시
            proxy_pass http://flight_search_service;
            
            # CORS 헤더 추가
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            
            # OPTIONS 요청 처리 (CORS preflight)
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # 예약 API (Booking Service로 라우팅)
        location /api/bookings {
            # Rate limiting (더 엄격하게)
            limit_req zone=api burst=10 nodelay;
            
            # 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 타임아웃 설정 (예약은 더 긴 시간 허용)
            proxy_connect_timeout 5s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            
            # Booking Service로 프록시
            proxy_pass http://flight_booking_service;
            
            # CORS 헤더 추가
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            
            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            return 200 "API Gateway is healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 서비스별 헬스체크 (모니터링용)
        location /health/search {
            proxy_pass http://flight_search_service/actuator/health;
            access_log off;
        }
        
        location /health/booking {
            proxy_pass http://flight_booking_service/actuator/health;
            access_log off;
        }
        
        # API 문서 (Swagger UI)
        location /api-docs {
            return 301 /api-docs/;
        }
        
        location /api-docs/ {
            # 기본적으로 Search Service의 API 문서
            proxy_pass http://flight_search_service/api-docs/;
        }
        
        location /swagger-ui/ {
            proxy_pass http://flight_search_service/swagger-ui/;
        }
        
        # 에러 페이지
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
    
    # 관리자 포트 (선택사항)
    server {
        listen 8090;
        server_name localhost;
        
        # Nginx 상태 정보
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;  # Docker 네트워크
            deny all;
        }
        
        # 간단한 API 상태 대시보드
        location / {
            return 200 '
            <!DOCTYPE html>
            <html>
            <head><title>Flight Booking API Status</title></head>
            <body>
                <h1>Flight Booking Microservices Status</h1>
                <ul>
                    <li><a href="/health/search">Search Service Health</a></li>
                    <li><a href="/health/booking">Booking Service Health</a></li>
                    <li><a href="/nginx_status">Nginx Status</a></li>
                </ul>
            </body>
            </html>';
            add_header Content-Type text/html;
        }
    }
} 
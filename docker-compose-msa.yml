version: '3.8'

services:
  # MySQL for Search Service
  search-db:
    image: mysql:8.0
    container_name: search-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: flight_search_db
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - search_mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - flight-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      interval: 30s

  # MySQL for Booking Service  
  booking-db:
    image: mysql:8.0
    container_name: booking-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: flight_booking_db
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - booking_mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - flight-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Flight Search Service
  flight-search-service:
    build:
      context: ./flight-search-service
      dockerfile: Dockerfile
    container_name: flight-search-service
    ports:
      - "8081:8081"
    environment:
      DB_HOST: search-db
      DB_PORT: 3306
      DB_NAME: flight_search_db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      AMADEUS_CLIENT_ID: ${AMADEUS_CLIENT_ID}
      AMADEUS_CLIENT_SECRET: ${AMADEUS_CLIENT_SECRET}
    depends_on:
      search-db:
        condition: service_healthy
    networks:
      - flight-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s

  # Flight Booking Service
  flight-booking-service:
    build:
      context: ./flight-booking-service
      dockerfile: Dockerfile
    container_name: flight-booking-service
    ports:
      - "8082:8082"
    environment:
      DB_HOST: booking-db
      DB_PORT: 3306
      DB_NAME: flight_booking_db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      SEARCH_SERVICE_URL: http://flight-search-service:8081
    depends_on:
      booking-db:
        condition: service_healthy
      flight-search-service:
        condition: service_healthy
    networks:
      - flight-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s

  # API Gateway (Nginx for now)
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "8080:80"
    volumes:
      - ./nginx-msa.conf:/etc/nginx/nginx.conf:ro
      - ./src/main/resources/static:/usr/share/nginx/html:ro
    depends_on:
      - flight-search-service
      - flight-booking-service
    networks:
      - flight-network

networks:
  flight-network:
    driver: bridge

volumes:
  search_mysql_data:
  booking_mysql_data: 